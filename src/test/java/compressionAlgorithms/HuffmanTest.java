/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package compressionAlgorithms;

import static org.junit.jupiter.api.Assertions.assertEquals;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Scanner;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

public class HuffmanTest {


    static File testFile;
    static File helloFile;
    static Huffman hf;

    @BeforeAll
    public static void init() {
        testFile = new File("src/test/resources/big.txt");
        helloFile = new File("src/test/resources/small.txt");
        hf = new Huffman();
    }

    @AfterAll
    public static void clean() {
        File huff = new File("src/test/resources/big.huff");
        File map = new File("src/test/resources/big.map");
        File reconstruct = new File("src/test/resources/big-reconstruct.txt");

        if (huff.exists()) {
            huff.delete();
        }
        if (map.exists()) {
            map.delete();
        }
        if (reconstruct.exists()) {
            reconstruct.delete();
        }

    }

    @Test
    public void testHuffmanCompressWithInCorrectFileExtension() throws IOException {
        assertEquals(false, hf.compress("testFile.csv"));
    }

    @Test
    public void testHuffmanDecompressWithInCorrectFileExtension()
            throws ClassNotFoundException, IOException {
        assertEquals(false, hf.deCompress("testFile.csv"));
    }

    @Test
    public void testCountCharFrequencyInFile()
            throws FileNotFoundException, UnsupportedEncodingException {
        HashMap<Character, Integer> map = hf.countCharFrequencyInFile(testFile);
        assertEquals(Integer.valueOf(69), map.get('e'));
    }

    @Test
    public void testConstructHuffmanTree() throws FileNotFoundException {
        HashMap<Character, Integer> map = hf.countCharFrequencyInFile(testFile);
        Node rootNode = hf.constructHuffmanTree(map);
        assertEquals(Integer.valueOf(738), rootNode.getValue());
    }

    @Test
    public void testConstructBitRepresentations() throws FileNotFoundException {
        HashMap<Character, String> map = hf.constructBitRepresentations(
                hf.constructHuffmanTree(hf.countCharFrequencyInFile(testFile)));
        assertEquals("0110", map.get('a'));
    }

    @Test
    public void testSaveToFile() throws IOException {
        hf.compress("src/test/resources/big.txt");

        File test = new File("src/test/resources/big.huff");
        File map = new File("src/test/resources/big.map");

        assertEquals(true, test.exists());
        assertEquals(true, map.exists());

    }

    @Test
    public void testGetBits() throws FileNotFoundException {
        HashMap<Character, Integer> freq = hf.countCharFrequencyInFile(helloFile);
        Node root = hf.constructHuffmanTree(freq);
        HashMap<Character, String> bitRepresentations = hf.constructBitRepresentations(root);
        String bits = hf.getBits(helloFile.getPath(), bitRepresentations);
        assertEquals(
                "1010110011101110110111011010010101110011111111000001000110001000111000100000101111110110110",
                bits);
    }

    @Test
    public void testGetOriginalText() throws FileNotFoundException {
        HashMap<Character, Integer> freq = hf.countCharFrequencyInFile(helloFile);
        Node root = hf.constructHuffmanTree(freq);
        HashMap<Character, String> bitRepresentations = hf.constructBitRepresentations(root);
        String bits = hf.getBits(helloFile.getPath(), bitRepresentations);

        String originalText = hf.getOriginalText(bits, root);

        assertEquals("Hello, Huffman and LZW!", originalText);
    }

    @Test
    public void testCreateOriginalFile() throws ClassNotFoundException, IOException {
        HashMap<Character, Integer> charFrequencies = hf.countCharFrequencyInFile(testFile);
        Node rootNode = hf.constructHuffmanTree(charFrequencies);
        HashMap<Character, String> charsBitRepresentations =
                hf.constructBitRepresentations(rootNode);

        String bits = hf.getBits("src/test/resources/big.txt", charsBitRepresentations);

        FileReaderWriter frw = new FileReaderWriter();
        frw.writeBitsToFile("src/test/resources/big", bits, charFrequencies);

        File test = new File("src/test/resources/big.huff");
        File map = new File("src/test/resources/big.map");

        assertEquals(true, test.exists());
        assertEquals(true, map.exists());

        Boolean success = hf.deCompress("src/test/resources/big.huff");

        assertEquals(true, success);

        File newFile = new File("src/test/resources/big-reconstruct.txt");

        assertEquals(true, newFile.exists());
    }

    @Test
    public void testOriginalContent() throws FileNotFoundException {

        File originalFile = new File("src/test/resources/big.txt");
        File constructedFile = new File("src/test/resources/big-reconstruct.txt");

        Scanner reader = new Scanner(originalFile);

        String originalContent = "";

        while (reader.hasNext()) {
            originalContent = originalContent + reader.nextLine();
        }

        reader.close();

        Scanner otherReader = new Scanner(constructedFile);

        String constructedContent = "";

        while (otherReader.hasNext()) {
            constructedContent = constructedContent + otherReader.nextLine();
        }

        otherReader.close();

        assertEquals(originalContent, constructedContent);
    }
}
